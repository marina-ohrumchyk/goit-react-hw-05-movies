{"version":3,"file":"static/js/280.7f5e5f98.chunk.js","mappings":"4OAGaA,EAAY,SAAC,GAAsB,IAC3BC,EAGDC,EAJQC,EAAmB,EAAnBA,aAQxB,OACI,4BACI,0BACI,gBAAKC,IAAKD,EAAaE,aAAcC,EAAAA,EAAAA,IAASH,EAAaE,aACrD,sCAAwCE,IAAI,QAEtD,0BACKJ,EAAaK,MADlB,KAVQN,EAW0BC,EAAaM,aAV5B,KAAhBP,EAAA,WAAyB,IAAIQ,KAAKR,GAAaS,cAA/C,KAAkE,QAYrE,4BACI,kCAAUR,EAAaS,iBACvB,wCACA,uBAAIT,EAAaU,YACjB,qCACA,wBArBKZ,EAqBQE,EAAaF,OApB3BA,EAAOa,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,aAyBnD,ECoCD,EA7DsB,WAAO,IAAD,IACxB,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOf,EAAP,KAAqBgB,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KA4BpD,OAzBAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAgBT,GAASU,MAAK,SAAAC,GAC1B,IACI9B,EAOA8B,EAPA9B,OACA+B,EAMAD,EANAC,GACAnB,EAKAkB,EALAlB,SACAR,EAIA0B,EAJA1B,YACAI,EAGAsB,EAHAtB,aACAD,EAEAuB,EAFAvB,MACAI,EACAmB,EADAnB,aAGJO,EAAgB,CACZlB,OAAAA,EACA+B,GAAAA,EACAnB,SAAAA,EACAR,YAAAA,EACAI,aAAAA,EACAD,MAAAA,EACAI,aAAAA,GAEP,GACJ,GAAE,CAACQ,KAIA,8BACI,4BACI,SAAC,KAAD,CAAMa,GAAIT,EAAaU,QAASR,MAAO,CAAEC,KAAML,GAA/C,qBAGCnB,GAAgBA,EAAa6B,KAC1B,SAAChC,EAAD,CAAWG,aAAcA,KAE7B,4BACI,oDACA,2BACI,yBACI,SAAC,KAAD,CAAM8B,GAAG,OAAT,qBAEJ,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,8BAIZ,SAAC,EAAAE,SAAD,CAAUC,UAAU,6CAApB,UACI,SAAC,KAAD,UAMnB,C","sources":["components/Movies/MovieCard.jsx","pages/MovieInfoPage.jsx"],"sourcesContent":["import { getImage } from \"services/getApi\";\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ movieDetails }) => {\n    const getGenre = genres => {\n        return genres.map(genre => genre.name).join(' ')\n    }\n    const getYear = releaseDate => {\n        return releaseDate !== '' ? `(${new Date(releaseDate).getFullYear()})` : '';\n    }\n    \n    return (\n        <div>\n            <div>\n                <img src={movieDetails.poster_path ? getImage(movieDetails.poster_path)\n                    : 'https://via.placeholder.com/300x400'}  alt=\"\"/>\n            </div>\n            <h1>\n                {movieDetails.title} {getYear(movieDetails.release_date)}\n            </h1>\n            <div>\n                <p>Vote: {movieDetails.vote_average}</p>\n                <h3>Overview: </h3>\n                <p>{movieDetails.overview}</p>\n                <h3>Genre: </h3>\n                <p>{getGenre(movieDetails.genres)}</p>\n            </div>     \n        </div>\n            \n    )\n}\n\nMovieCard.propTypes = {\n    movieDetails: PropTypes.shape({\n        genres: PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.number.isRequired,\n                name: PropTypes.string.isRequired,\n            })\n        ),\n        id: PropTypes.number.isRequired,\n        overview: PropTypes.string,\n        poster_path: PropTypes.string,\n        release_date: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n    })\n}\n\n","import { useParams, useLocation, Link, Outlet } from \"react-router-dom\";\nimport { useState, useEffect, useRef, Suspense } from \"react\";\nimport { getMovieDetails } from \"services/getApi\";\nimport { MovieCard } from 'components/Movies/MovieCard';\n\nconst MovieInfoPage = () => {\n    const [movieDetails, setMovieDetails] = useState(null);\n    const { movieId } = useParams();\n    const location = useLocation();\n    const backLinkHref = useRef(location.state?.from ?? '/');\n\n\n    useEffect(() => {\n        getMovieDetails(movieId).then(response => {\n            const {\n                genres,\n                id,\n                overview,\n                poster_path,\n                release_date,\n                title,\n                vote_average,\n            } = response;\n            \n            setMovieDetails({\n                genres,\n                id,\n                overview,\n                poster_path,\n                release_date,\n                title,\n                vote_average,\n            });\n        });\n    }, [movieId])\n    \n\n    return (\n        <section>\n            <div>\n                <Link to={backLinkHref.current} state={{ from: location }}>\n                    Go back\n                </Link>\n                {movieDetails && movieDetails.id && (\n                    <MovieCard movieDetails={movieDetails}></MovieCard>\n                )}\n                <div>\n                    <h3>Additional Information</h3>\n                    <ul>\n                        <li>\n                            <Link to=\"cast\">Cast</Link>\n                        </li>\n                        <li>\n                            <Link to=\"reviews\">Reviews</Link>\n                        </li>\n                    </ul>\n                </div>\n                <Suspense fallback={<div>Loading page...</div>}>\n                    <Outlet />\n                </Suspense>\n            </div>   \n        </section>\n    )\n\n}\n\nexport default MovieInfoPage;"],"names":["MovieCard","genres","releaseDate","movieDetails","src","poster_path","getImage","alt","title","release_date","Date","getFullYear","vote_average","overview","map","genre","name","join","useState","setMovieDetails","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","getMovieDetails","then","response","id","to","current","Suspense","fallback"],"sourceRoot":""}